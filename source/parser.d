module com.davidjung.spider.parser;

/**
 * spider-dude :: Self-made net-net & value stocks screener for KRX üìà
 * github.com/davidjung-kr/spider-dude
 * 
 * Date: 03, 2022
 * Authors: David Jung
 * License: GPL-3.0
 */

import std.stdio;
import std.regex;
import std.conv;
import std.path;
import std.file;
import std.format;
import std.regex;
import std.string;
import com.davidjung.spider.types;
import com.davidjung.spider.report;

/**
 * DART Ïû¨Î¨¥Îç∞Ïù¥ÌÑ∞ ÌååÏÑú
 *
 * Check out: https://opendart.fss.or.kr/disclosureinfo/fnltt/dwld/main.do
 */
class Parser {
    /// ÏõêÎ≥∏ ÌååÏùºÏù¥Î¶Ñ
    private string _fileName;
    /// ÏõêÎ≥∏ ÌååÏùºÏù¥Î¶Ñ
	@property string fileName() {
		return _fileName;
	}
    /// ÏõêÎ≥∏ ÌååÏùºÏÉùÏÑ± ÎÇ†Ïßú (From DART)
	private string _date;
	@property string date() {
		return this._date;
	}
    private bool _isReady = false;
	@property bool ready() {
		return _isReady;
	}

    private string _year;
    private ReportType _reportType;
	private StatementType _statementType;
	private int colSize = 0;
	private Period _period;

	/**
     * ÏÉùÏÑ±Ïûê
     * ÏùºÍ¥Ñ Ïû¨Î¨¥Îç∞Ïù¥ÌÑ∞ ÌååÏã±Ïóê ÌïÑÏöîÌïú Îß§Í∞úÎ≥ÄÏàòÎ•º Î∞õÏäµÎãàÎã§.
     * Params:
     *  year = ÌöåÍ≥ÑÎÖÑÎèÑ
     *  p = Î∂ÑÍ∏∞
     *  rt = Ïó∞Í≤∞/Í∞úÎ≥Ñ Ïó¨Î∂Ä
     *  st = Î≥¥Í≥†ÏÑú Íµ¨Î∂Ñ
     */
	this(string year, Period p, ReportType rt, StatementType st) {
        this._year = year;
		this._period = p;
        this._reportType = rt;
        this._statementType = st;
		string pattern =  format("%s_%s_%s_%s_*.txt",
									year,
									GetCodeFrom.period(p),
									GetCodeFrom.reportType(rt),
									GetCodeFrom.statementType(st));
		auto list = dirEntries("", pattern, SpanMode.breadth);
		
		if(list.empty)
			throw new Exception("Can't find file with this pattern => " ~ pattern);
		this._fileName = list.front;
		auto rxResult = matchFirst(this._fileName, ctRegex!(`([\d]+).txt`));

		if(rxResult.empty)
			throw new Exception("Can't find date with this pattern => " ~ format("[%s : %s]", this._fileName, `([\d]+).txt`));
		
		this._date = rxResult[1];
		this._isReady = true;

        switch(this._statementType){
        case StatementType.BS: this.colSize = 13; break;
        case StatementType.IS: this.colSize = 16; break;
        default: break;
        }
    }

	/**
	 * ÏùΩÍ∏∞
	 */
	public void read(ref Report rpt) {
		switch(this._statementType) {
		case StatementType.BS: readBalanceSheet(rpt); break;
		case StatementType.IS: readIncomeSheet(rpt); break;
		case StatementType.CIS:readComprehensiveIncomeSheet(rpt); break;
		default: break;
		}
	}

	/**
	 * ÏÜêÏùµÍ≥ÑÏÇ∞ÏÑú Î°úÎìú
	 */
	private void readIncomeSheet(ref Report rpt) {
		Is[string] incomeSheet;
		File f = File(this._fileName, "r");
		f.readln();
		while(!f.eof()) {
			string line = f.readln();
			string[] cell = line.split("\t");
			if(cell.length <= 0) continue;
			string code = cell[1][1..7];

			if(code !in incomeSheet) { // ÏóÜÏúºÎ©¥ Ïã†Í∑ú Îì±Î°ù
				Is newIncomeSheet;
				newIncomeSheet.type = cell[0]; // Ïû¨Î¨¥Ï†úÌëúÏ¢ÖÎ•ò
				newIncomeSheet.code = code; // Ï¢ÖÎ™©ÏΩîÎìú
				newIncomeSheet.name = cell[2]; // ÌöåÏÇ¨Î™Ö
				newIncomeSheet.market = cell[3]; // ÏãúÏû•Íµ¨Î∂Ñ
				newIncomeSheet.sector = cell[4]; // ÏóÖÏ¢Ö
				newIncomeSheet.sectorName = cell[5]; // ÏóÖÏ¢ÖÎ™Ö
				newIncomeSheet.endMonth = cell[6]; // Í≤∞ÏÇ∞Ïõî
				newIncomeSheet.endDay = cell[7]; // Í≤∞ÏÇ∞Í∏∞Ï§ÄÏùº
				newIncomeSheet.report = cell[8]; // Î≥¥Í≥†ÏÑúÏ¢ÖÎ•ò
				
				incomeSheet[newIncomeSheet.code] = newIncomeSheet;
			}

			StatementNq st = StatementNq();
			st.currency = cell[9];         // ÌÜµÌôîÏΩîÎìú
			st.statementCode = strip(cell[10]); // Ìï≠Î™©ÏΩîÎìú
			st.rowName  = strip(cell[11]); // Ìï≠Î™©Î™Ö
			st.setMoney(cell[12], cell[13], cell[14], cell[15], cell[16], cell[17]);
			incomeSheet[code].statements ~= st;
		}
		f.close();
        rpt.income = incomeSheet;
	}

	/**
	 * Ìè¨Í¥ÑÏÜêÏùµÍ≥ÑÏÇ∞ÏÑú Î°úÎìú
	 */
	private void readComprehensiveIncomeSheet(ref Report rpt) {
		Cis[string] comprehensiveIncomeSheet;
		File f = File(this._fileName, "r");
		f.readln();
		while(!f.eof()) {
			string line = f.readln();
			string[] cell = line.split("\t");
			if(cell.length <= 0) continue;
			string code = cell[1][1..7];

			if(code !in comprehensiveIncomeSheet) { // ÏóÜÏúºÎ©¥ Ïã†Í∑ú Îì±Î°ù
				Cis newComprehensiveIncomeSheet;
				newComprehensiveIncomeSheet.type = cell[0]; // Ïû¨Î¨¥Ï†úÌëúÏ¢ÖÎ•ò
				newComprehensiveIncomeSheet.code = code; // Ï¢ÖÎ™©ÏΩîÎìú
				newComprehensiveIncomeSheet.name = cell[2]; // ÌöåÏÇ¨Î™Ö
				newComprehensiveIncomeSheet.market = cell[3]; // ÏãúÏû•Íµ¨Î∂Ñ
				newComprehensiveIncomeSheet.sector = cell[4]; // ÏóÖÏ¢Ö
				newComprehensiveIncomeSheet.sectorName = cell[5]; // ÏóÖÏ¢ÖÎ™Ö
				newComprehensiveIncomeSheet.endMonth = cell[6]; // Í≤∞ÏÇ∞Ïõî
				newComprehensiveIncomeSheet.endDay = cell[7]; // Í≤∞ÏÇ∞Í∏∞Ï§ÄÏùº
				newComprehensiveIncomeSheet.report = cell[8]; // Î≥¥Í≥†ÏÑúÏ¢ÖÎ•ò
				
				comprehensiveIncomeSheet[newComprehensiveIncomeSheet.code] = newComprehensiveIncomeSheet;
			}

			StatementNq st = StatementNq();
			st.currency = cell[9];         // ÌÜµÌôîÏΩîÎìú
			st.statementCode = strip(cell[10]); // Ìï≠Î™©ÏΩîÎìú
			st.rowName  = strip(cell[11]); // Ìï≠Î™©Î™Ö
			st.setMoney(cell[12], cell[13], cell[14], cell[15], cell[16], cell[17]);
			comprehensiveIncomeSheet[code].statements ~= st;
		}
		f.close();
        rpt.comprehensiveIncome = comprehensiveIncomeSheet;
	}

	private void readBalanceSheet(ref Report rpt) {
		Bs[string] bs;

		File f = File(this._fileName, "r");
		f.readln();
		while(!f.eof()) {
			string line = f.readln();
			string[] cell = line.split("\t");

			if(cell.length <= 0) continue;
			
			string code = cell[1][1..7];
			
			if(code !in bs) { // ÏóÜÏúºÎ©¥ Ïã†Í∑ú Îì±Î°ù
				Bs newBs;
				newBs.type = cell[0]; // Ïû¨Î¨¥Ï†úÌëúÏ¢ÖÎ•ò
				newBs.code = code; // Ï¢ÖÎ™©ÏΩîÎìú
				newBs.name = cell[2]; // ÌöåÏÇ¨Î™Ö
				newBs.market = cell[3]; // ÏãúÏû•Íµ¨Î∂Ñ
				newBs.sector = cell[4]; // ÏóÖÏ¢Ö
				newBs.sectorName = cell[5]; // ÏóÖÏ¢ÖÎ™Ö
				newBs.endMonth = cell[6]; // Í≤∞ÏÇ∞Ïõî
				newBs.endDay = cell[7]; // Í≤∞ÏÇ∞Í∏∞Ï§ÄÏùº
				newBs.report = cell[8]; // Î≥¥Í≥†ÏÑúÏ¢ÖÎ•ò
				
				bs[newBs.code] = newBs;
			}

			Statement st = Statement();
			st.currency = cell[9]; // ÌÜµÌôîÏΩîÎìú
			st.statementCode = strip(cell[10]); // Ìï≠Î™©ÏΩîÎìú
			st.rowName = strip(cell[11]); // Ìï≠Î™©Î™Ö
			st.setMoney(cell[12], cell[13], cell[14]);
			bs[code].statements ~= st;
		}
        
		f.close();
        rpt.balance = bs;
	}

	/**
	 * Ìï≠Î™©ÏΩîÎìú Ï†ïÍ∑úÌôî
	 * 
	 * entity00128661_udf_IS_2021111016569448 .. ÏôÄ Í∞ôÏù¥
	 * Í≥µÏãùÏ†ÅÏù∏ IFRS Ìï≠Î™©ÏΩîÎìúÍ∞Ä ÏïÑÎãå Ìï≠Î™©Î™ÖÏóêÏÑú Î∂àÌïÑÏöîÌïú Îç∞Ïù¥ÌÑ∞Î•º ÏßÄÏö∞Í≥†
	 * `udf-`Î•º Î∂ôÏó¨ Î¶¨ÌÑ¥ÌïúÎã§.
	 * ÌÅ¥ÎûúÏßïÌï† ÎåÄÏÉÅÏù¥ ÏóÜÏùÑ Í≤ΩÏö∞ ÏûÖÎ†• Í∞í Í∑∏ÎåÄÎ°ú Î¶¨ÌÑ¥.
	 *
	 * Examples: 
	 *	assert("udf-IncomeStatementAbstract" ==
	 *         Parser.cleaningAccountingCode(
	 *	"entity00128661_udf_IS_2021111016569448_IncomeStatementAbstract"));
	 * 
	 */
	private static string cleaningAccountingCode(string blaha) {
		if(blaha.indexOf("entity") < 0) {
			return blaha;
		}
		auto matchResult = matchFirst(blaha, ctRegex!(`entity\d+_udf_[BIS]+_\d+_(\w+)`));
		if(matchResult.empty)
			return blaha;
		return "udf-"~matchResult[1]; // 0ÏùÄ Full-match, 1Î∂ÄÌÑ∞ group
	}
	
}

unittest {
	assert("udf-IncomeStatementAbstract" == Parser.cleaningAccountingCode(
			"entity00128661_udf_IS_2021111016569448_IncomeStatementAbstract")); // == ÏßÄÎ∂ÑÎ≤ïÏù¥Ïùµ
}